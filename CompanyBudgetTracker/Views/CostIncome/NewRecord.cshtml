@using CompanyBudgetTracker.Controllers
@inject CompanyBudgetTracker.Interfaces.ICurrentUserService CurrentUserService

@{
    ViewData["Title"] = "Add New Cost / Income";
}

<style>
    .form-element {
        margin-bottom: 20px;
    }
    .input-valid {
        border-color: #198754; /* Bootstrap success green */
    }
    
    .input-invalid {
        border-color: #dc3545; /* Bootstrap danger red */
    }
    
    .validation-message {
        color: #dc3545; /* Bootstrap danger red  */
        font-size: 0.875em;
    }

    head, body, html {
        background-color: #121212;
        color: #e0e0e0;
    }
    
    a {
        color: #bb86fc;
    }
</style>

<form method="post" id="transactionForm" enctype="multipart/form-data" action="@Url.Action("SaveTransaction", "CostIncome")">
    <div class="text-center form-element">
        <h1 class="display-4">Welcome</h1>
        <div class="text-center form-element">
            <div class="form-group">
                <input type="hidden" id="userId" name="UserId" value="@CurrentUserService.GetUserId()" />
                <label>Name: </label>
                <input id="transactionName" name="Name" type="text" required/>

                <label>Amount: </label>
                <input id="amount" name="Amount" type="number" min="0.01" required/>

                <select id="transactionType" name="Type">
                    <option value="Cost">Cost</option>
                    <option value="Income">Income</option>
                </select>

                <label>Date: </label>
                <input id="transactionDate" name="Date" type="date" required/>
            </div>
            
            <div class="form-group">
                <label for="categoryId">Category: </label>
                <select id="categoryId" name="CategoryId" class="form-control">
                    <option value="">Please select a category</option>
                    @foreach (var category in (SelectList)ViewData["Categories"])
                    {
                        <option value="@category.Value">@category.Text</option>
                    }
                </select>
            </div>
            <div class="text-center form-element">
                <label for="transactionAtt">Select attachment (if required): </label>
                <input id="transactionAtt" name="transactionAtt" type="file" required onchange="updateLabel()"/>
            </div>
        </div>
        <div class="text-center form-element">
            <button type="submit" id="submitBtn">Submit</button>
        </div>
    </div>
</form>


@section Scripts
{
    <script type="text/javascript">
        document.getElementById("submitBtn").addEventListener("click", function (event) {
            event.preventDefault();
            
            var formData = new FormData(document.getElementById("transactionForm"));
            fetch('@Url.Action("SaveTransaction", "CostIncome")', {
                method: 'POST',
                body: formData,
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Success:', data);
            })
            .catch(error => {
                console.error('Error:', error);
            });
        });

    </script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            validateForm();
    
            function validateInput(inputElement, isValid) {
                if (isValid) {
                    $(inputElement).removeClass("input-invalid").addClass("input-valid");
                    $(inputElement).next(".validation-message").remove();
                } else {
                    $(inputElement).removeClass("input-valid").addClass("input-invalid");
                    if ($(inputElement).next(".validation-message").length === 0) {
                        $('<div class="validation-message">This field is required.</div>').insertAfter($(inputElement));
                    }
                }
            }
    
            function validateForm() {
                var isFormValid = true;
    
                var name = $('#transactionName').val().trim();
                validateInput('#transactionName', name !== '');
                isFormValid &= (name !== '');
    
                var amount = parseFloat($('#amount').val());
                validateInput('#amount', !isNaN(amount) && amount > 0);
                isFormValid &= (!isNaN(amount) && amount > 0);
    
                var date = $('#transactionDate').val().trim();
                validateInput('#transactionDate', date !== '');
                isFormValid &= (date !== '');
    
                $("#submitBtn").prop('disabled', !isFormValid);
            }
    
            $("input, select").on("change keyup", function () {
                validateForm();
            });
        });
    </script>
    
}


