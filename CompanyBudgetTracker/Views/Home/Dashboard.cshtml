@model DashboardModel
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
<script src="https://cdn.jsdelivr.net/npm/moment/min/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
    .dashboard {
        max-width: 800px;
        margin: auto;
    }
    .chart-container {
        position: relative;
        height: 400px;
    }
    canvas {
        display: block;
        width: 100% !important;
        height: auto !important;
    }
</style>

<form id="dateForm" asp-action="Dashboard" method="get">
    <div class="date-selection">
        <label for="startDate">From:</label>
        <input type="date" id="startDate" name="startDate" value="@Model.StartDate.ToString("yyyy-MM-dd")" />

        <label for="endDate">To:</label>
        <input type="date" id="endDate" name="endDate" value="@Model.EndDate.ToString("yyyy-MM-dd")" />

        <button type="submit">Show</button>
    </div>
    <div class="predefined-ranges">
        <button type="button" onclick="setDateRange('last30days')">Last 30 Days</button>
        <button type="button" onclick="setDateRange('last3months')">Last 3 Months</button>
        <button type="button" onclick="setDateRange('lastyear')">Last Year</button>
    </div>
</form>

<div class="dashboard">
    <h2>Dashboard</h2>
    <button id="exportData">Export Data</button>
    
    <div class="chart-container">
        <canvas id="incomeVsExpensesChart"></canvas>
    </div>
    <div>Total Income: @Model.TotalIncome</div>
    <div>Total Expenses: @Model.TotalExpenses</div>
    <div>Net Income: @Model.ResultIncome</div>

    <h3>Income by Category</h3>
    <div class="chart-container" data-income-by-category='@Json.Serialize(Model.IncomeByCategory)'>
        <canvas id="incomeByCategoryChart"></canvas>
    </div>

    <h3>Expenses by Category</h3>
    <div class="chart-container" data-expenses-by-category='@Json.Serialize(Model.ExpensesByCategory)'>
        <canvas id="expensesByCategoryChart"></canvas>
    </div>

    <h3>Monthly Breakdown</h3>
    <div class="chart-container" data-monthly-breakdowns='@Json.Serialize(Model.MonthlyDashboards)'>
        <canvas id="monthlyBreakdownChart"></canvas>
    </div>
</div>

@section Scripts
{
    <script>
        $(function() {
            $('input[name="daterange"]').daterangepicker({
                opens: 'left',
                startDate: moment('@Model.StartDate').format('MM/DD/YYYY'),
                endDate: moment('@Model.EndDate').format('MM/DD/YYYY')
            }, function(start, end, label) {
                document.getElementById('startDate').value = start.format('YYYY-MM-DD');
                document.getElementById('endDate').value = end.format('YYYY-MM-DD');
                document.getElementById('dateForm').submit();
            });
        });

        function setDateRange(range) {
            const form = document.getElementById('dateForm');
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');

            let startDate, endDate;

            switch (range) {
                case 'last30days':
                    startDate = new Date();
                    startDate.setDate(startDate.getDate() - 30);
                    endDate = new Date();
                    break;
                case 'last3months':
                    startDate = new Date();
                    startDate.setMonth(startDate.getMonth() - 3);
                    endDate = new Date();
                    break;
                case 'lastyear':
                    startDate = new Date();
                    startDate.setFullYear(startDate.getFullYear() - 1);
                    endDate = new Date();
                    break;
            }

            startDateInput.value = startDate.toISOString().split('T')[0];
            endDateInput.value = endDate.toISOString().split('T')[0];

            form.submit();
        }

        function getDataFromContainer(container, dataKey) {
            try {
                return JSON.parse(container.getAttribute(dataKey));
            } catch (error) {
                console.error(`Failed to parse data for ${dataKey}:`, error);
                return {};
            }
        }

        const incomeByCategoryContainer = document.querySelector('[data-income-by-category]');
        const incomeByCategoryData = getDataFromContainer(incomeByCategoryContainer, 'data-income-by-category');

        const expensesByCategoryContainer = document.querySelector('[data-expenses-by-category]');
        const expensesByCategoryData = getDataFromContainer(expensesByCategoryContainer, 'data-expenses-by-category');

        const monthlyBreakdownsContainer = document.querySelector('[data-monthly-breakdowns]');
        const monthlyBreakdownsData = getDataFromContainer(monthlyBreakdownsContainer, 'data-monthly-breakdowns');

        const incomeVsExpensesCtx = document.getElementById('incomeVsExpensesChart').getContext('2d');
        const incomeVsExpensesChart = new Chart(incomeVsExpensesCtx, {
            type: 'bar',
            data: {
                labels: ['Income', 'Expenses', 'Net Income'],
                datasets: [{
                    label: 'Amount',
                    data: [@Model.TotalIncome, @Model.TotalExpenses, @Model.ResultIncome],
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(153, 102, 255, 0.2)'
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                        'rgba(255, 99, 132, 1)',
                        'rgba(153, 102, 255, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y);
                                return label;
                            }
                        }
                    },
                    legend: {
                        display: true,
                        position: 'top'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        const incomeByCategoryCtx = document.getElementById('incomeByCategoryChart').getContext('2d');
        const incomeByCategoryLabels = Object.keys(incomeByCategoryData);
        const incomeByCategoryAmounts = Object.values(incomeByCategoryData);
        const incomeByCategoryChart = new Chart(incomeByCategoryCtx, {
            type: 'pie',
            data: {
                labels: incomeByCategoryLabels,
                datasets: [{
                    label: 'Income by Category',
                    data: incomeByCategoryAmounts,
                    backgroundColor: generateColors(incomeByCategoryLabels.length),
                    borderColor: 'rgba(0, 0, 0, 0.1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false
            }
        });

        const expensesByCategoryCtx = document.getElementById('expensesByCategoryChart').getContext('2d');
        const expensesByCategoryLabels = Object.keys(expensesByCategoryData);
        const expensesByCategoryAmounts = Object.values(expensesByCategoryData);
        const expensesByCategoryChart = new Chart(expensesByCategoryCtx, {
            type: 'pie',
            data: {
                labels: expensesByCategoryLabels,
                datasets: [{
                    label: 'Expenses by Category',
                    data: expensesByCategoryAmounts,
                    backgroundColor: generateColors(expensesByCategoryLabels.length),
                    borderColor: 'rgba(0, 0, 0, 0.1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false
            }
        });

        const monthlyBreakdownCtx = document.getElementById('monthlyBreakdownChart').getContext('2d');
        const monthlyBreakdownLabels = monthlyBreakdownsData.map(mb => mb.Month);
        const monthlyIncomeData = monthlyBreakdownsData.map(mb => mb.Income);
        const monthlyExpensesData = monthlyBreakdownsData.map(mb => mb.Expenses);
        const monthlyBreakdownChart = new Chart(monthlyBreakdownCtx, {
            type: 'line',
            data: {
                labels: monthlyBreakdownLabels,
                datasets: [
                    {
                        label: 'Income',
                        data: monthlyIncomeData,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        fill: false
                    },
                    {
                        label: 'Expenses',
                        data: monthlyExpensesData,
                        borderColor: 'rgba(255, 99, 132, 1)',
                        fill: false
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        function generateColors(numColors) {
            const colors = [];
            for (let i = 0; i < numColors; i++) {
                const r = Math.floor(Math.random() * 255);
                const g = Math.floor(Math.random() * 255);
                const b = Math.floor(Math.random() * 255);
                colors.push(`rgba(${r}, ${g}, ${b}, 0.2)`);
            }
            return colors;
        }

        incomeByCategoryChart.options.onClick = function(evt, element) {
            if (element.length > 0) {
                const category = incomeByCategoryLabels[element[0].index];
                window.location.href = `/Details?category=${category}&startDate=${document.getElementById('startDate').value}&endDate=${document.getElementById('endDate').value}`;
            }
        };

        document.getElementById('exportData').addEventListener('click', function() {
            const data = {
                totalIncome: @Model.TotalIncome,
                totalExpenses: @Model.TotalExpenses,
                netIncome: @Model.ResultIncome,
                incomeByCategory: incomeByCategoryData,
                expensesByCategory: expensesByCategoryData
            };

            let csvContent = "data:text/csv;charset=utf-8,";
            csvContent += "Category,Amount\n";

            Object.entries(data.incomeByCategory).forEach(([category, amount]) => {
                csvContent += category + "," + amount + "\n";
            });

            Object.entries(data.expensesByCategory).forEach(([category, amount]) => {
                csvContent += category + "," + amount + "\n";
            });

            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "dashboard_data.csv");
            document.body.appendChild(link);
            link.click();
        });
    </script>
}
